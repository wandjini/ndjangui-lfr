/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ndjangui.notificationcenter.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.xpiping.notificationcenter.model.NotificaMessage;
import com.xpiping.notificationcenter.model.NotificaMessageModel;
import com.xpiping.notificationcenter.model.NotificaMessageSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the NotificaMessage service. Represents a row in the &quot;xpiping_notificationcenter_NotificaMessage&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.xpiping.notificationcenter.model.NotificaMessageModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NotificaMessageImpl}.
 * </p>
 *
 * @author marcoleo
 * @see NotificaMessageImpl
 * @see com.xpiping.notificationcenter.model.NotificaMessage
 * @see com.xpiping.notificationcenter.model.NotificaMessageModel
 * @generated
 */
@JSON(strict = true)
public class NotificaMessageModelImpl extends BaseModelImpl<NotificaMessage>
	implements NotificaMessageModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a notifica message model instance should use the {@link com.xpiping.notificationcenter.model.NotificaMessage} interface instead.
	 */
	public static final String TABLE_NAME = "xpiping_notificationcenter_NotificaMessage";
	public static final Object[][] TABLE_COLUMNS = {
			{ "notificaMessageId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "notificaId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "entityId", Types.BIGINT },
			{ "entityName", Types.VARCHAR },
			{ "queuedEmailId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table xpiping_notificationcenter_NotificaMessage (notificaMessageId LONG not null primary key,companyId LONG,createDate DATE null,modifiedDate DATE null,notificaId LONG,userId LONG,entityId LONG,entityName VARCHAR(75) null,queuedEmailId LONG)";
	public static final String TABLE_SQL_DROP = "drop table xpiping_notificationcenter_NotificaMessage";
	public static final String ORDER_BY_JPQL = " ORDER BY notificaMessage.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY xpiping_notificationcenter_NotificaMessage.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.xpiping.notificationcenter.model.NotificaMessage"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.xpiping.notificationcenter.model.NotificaMessage"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.xpiping.notificationcenter.model.NotificaMessage"),
			true);
	public static long ENTITYID_COLUMN_BITMASK = 1L;
	public static long ENTITYNAME_COLUMN_BITMASK = 2L;
	public static long NOTIFICAID_COLUMN_BITMASK = 4L;
	public static long CREATEDATE_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static NotificaMessage toModel(NotificaMessageSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		NotificaMessage model = new NotificaMessageImpl();

		model.setNotificaMessageId(soapModel.getNotificaMessageId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setNotificaId(soapModel.getNotificaId());
		model.setUserId(soapModel.getUserId());
		model.setEntityId(soapModel.getEntityId());
		model.setEntityName(soapModel.getEntityName());
		model.setQueuedEmailId(soapModel.getQueuedEmailId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<NotificaMessage> toModels(
		NotificaMessageSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<NotificaMessage> models = new ArrayList<NotificaMessage>(soapModels.length);

		for (NotificaMessageSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.xpiping.notificationcenter.model.NotificaMessage"));

	public NotificaMessageModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _notificaMessageId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNotificaMessageId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _notificaMessageId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return NotificaMessage.class;
	}

	@Override
	public String getModelClassName() {
		return NotificaMessage.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("notificaMessageId", getNotificaMessageId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("notificaId", getNotificaId());
		attributes.put("userId", getUserId());
		attributes.put("entityId", getEntityId());
		attributes.put("entityName", getEntityName());
		attributes.put("queuedEmailId", getQueuedEmailId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long notificaMessageId = (Long)attributes.get("notificaMessageId");

		if (notificaMessageId != null) {
			setNotificaMessageId(notificaMessageId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long notificaId = (Long)attributes.get("notificaId");

		if (notificaId != null) {
			setNotificaId(notificaId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long entityId = (Long)attributes.get("entityId");

		if (entityId != null) {
			setEntityId(entityId);
		}

		String entityName = (String)attributes.get("entityName");

		if (entityName != null) {
			setEntityName(entityName);
		}

		Long queuedEmailId = (Long)attributes.get("queuedEmailId");

		if (queuedEmailId != null) {
			setQueuedEmailId(queuedEmailId);
		}
	}

	@JSON
	@Override
	public long getNotificaMessageId() {
		return _notificaMessageId;
	}

	@Override
	public void setNotificaMessageId(long notificaMessageId) {
		_notificaMessageId = notificaMessageId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getNotificaId() {
		return _notificaId;
	}

	@Override
	public void setNotificaId(long notificaId) {
		_columnBitmask |= NOTIFICAID_COLUMN_BITMASK;

		if (!_setOriginalNotificaId) {
			_setOriginalNotificaId = true;

			_originalNotificaId = _notificaId;
		}

		_notificaId = notificaId;
	}

	public long getOriginalNotificaId() {
		return _originalNotificaId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public long getEntityId() {
		return _entityId;
	}

	@Override
	public void setEntityId(long entityId) {
		_columnBitmask |= ENTITYID_COLUMN_BITMASK;

		if (!_setOriginalEntityId) {
			_setOriginalEntityId = true;

			_originalEntityId = _entityId;
		}

		_entityId = entityId;
	}

	public long getOriginalEntityId() {
		return _originalEntityId;
	}

	@JSON
	@Override
	public String getEntityName() {
		if (_entityName == null) {
			return StringPool.BLANK;
		}
		else {
			return _entityName;
		}
	}

	@Override
	public void setEntityName(String entityName) {
		_columnBitmask |= ENTITYNAME_COLUMN_BITMASK;

		if (_originalEntityName == null) {
			_originalEntityName = _entityName;
		}

		_entityName = entityName;
	}

	public String getOriginalEntityName() {
		return GetterUtil.getString(_originalEntityName);
	}

	@JSON
	@Override
	public long getQueuedEmailId() {
		return _queuedEmailId;
	}

	@Override
	public void setQueuedEmailId(long queuedEmailId) {
		_queuedEmailId = queuedEmailId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			NotificaMessage.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public NotificaMessage toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (NotificaMessage)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NotificaMessageImpl notificaMessageImpl = new NotificaMessageImpl();

		notificaMessageImpl.setNotificaMessageId(getNotificaMessageId());
		notificaMessageImpl.setCompanyId(getCompanyId());
		notificaMessageImpl.setCreateDate(getCreateDate());
		notificaMessageImpl.setModifiedDate(getModifiedDate());
		notificaMessageImpl.setNotificaId(getNotificaId());
		notificaMessageImpl.setUserId(getUserId());
		notificaMessageImpl.setEntityId(getEntityId());
		notificaMessageImpl.setEntityName(getEntityName());
		notificaMessageImpl.setQueuedEmailId(getQueuedEmailId());

		notificaMessageImpl.resetOriginalValues();

		return notificaMessageImpl;
	}

	@Override
	public int compareTo(NotificaMessage notificaMessage) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(),
				notificaMessage.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof NotificaMessage)) {
			return false;
		}

		NotificaMessage notificaMessage = (NotificaMessage)obj;

		long primaryKey = notificaMessage.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		NotificaMessageModelImpl notificaMessageModelImpl = this;

		notificaMessageModelImpl._originalNotificaId = notificaMessageModelImpl._notificaId;

		notificaMessageModelImpl._setOriginalNotificaId = false;

		notificaMessageModelImpl._originalEntityId = notificaMessageModelImpl._entityId;

		notificaMessageModelImpl._setOriginalEntityId = false;

		notificaMessageModelImpl._originalEntityName = notificaMessageModelImpl._entityName;

		notificaMessageModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<NotificaMessage> toCacheModel() {
		NotificaMessageCacheModel notificaMessageCacheModel = new NotificaMessageCacheModel();

		notificaMessageCacheModel.notificaMessageId = getNotificaMessageId();

		notificaMessageCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			notificaMessageCacheModel.createDate = createDate.getTime();
		}
		else {
			notificaMessageCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			notificaMessageCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			notificaMessageCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		notificaMessageCacheModel.notificaId = getNotificaId();

		notificaMessageCacheModel.userId = getUserId();

		notificaMessageCacheModel.entityId = getEntityId();

		notificaMessageCacheModel.entityName = getEntityName();

		String entityName = notificaMessageCacheModel.entityName;

		if ((entityName != null) && (entityName.length() == 0)) {
			notificaMessageCacheModel.entityName = null;
		}

		notificaMessageCacheModel.queuedEmailId = getQueuedEmailId();

		return notificaMessageCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{notificaMessageId=");
		sb.append(getNotificaMessageId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", notificaId=");
		sb.append(getNotificaId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", entityId=");
		sb.append(getEntityId());
		sb.append(", entityName=");
		sb.append(getEntityName());
		sb.append(", queuedEmailId=");
		sb.append(getQueuedEmailId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.xpiping.notificationcenter.model.NotificaMessage");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>notificaMessageId</column-name><column-value><![CDATA[");
		sb.append(getNotificaMessageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notificaId</column-name><column-value><![CDATA[");
		sb.append(getNotificaId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>entityId</column-name><column-value><![CDATA[");
		sb.append(getEntityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>entityName</column-name><column-value><![CDATA[");
		sb.append(getEntityName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>queuedEmailId</column-name><column-value><![CDATA[");
		sb.append(getQueuedEmailId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = NotificaMessage.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			NotificaMessage.class
		};
	private long _notificaMessageId;
	private long _companyId;
	private Date _createDate;
	private Date _modifiedDate;
	private long _notificaId;
	private long _originalNotificaId;
	private boolean _setOriginalNotificaId;
	private long _userId;
	private String _userUuid;
	private long _entityId;
	private long _originalEntityId;
	private boolean _setOriginalEntityId;
	private String _entityName;
	private String _originalEntityName;
	private long _queuedEmailId;
	private long _columnBitmask;
	private NotificaMessage _escapedModel;
}