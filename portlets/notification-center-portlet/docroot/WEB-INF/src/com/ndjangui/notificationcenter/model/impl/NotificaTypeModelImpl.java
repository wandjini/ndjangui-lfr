/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ndjangui.notificationcenter.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.xpiping.notificationcenter.model.NotificaType;
import com.xpiping.notificationcenter.model.NotificaTypeModel;
import com.xpiping.notificationcenter.model.NotificaTypeSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the NotificaType service. Represents a row in the &quot;xpiping_notificationcenter_NotificaType&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.xpiping.notificationcenter.model.NotificaTypeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NotificaTypeImpl}.
 * </p>
 *
 * @author marcoleo
 * @see NotificaTypeImpl
 * @see com.xpiping.notificationcenter.model.NotificaType
 * @see com.xpiping.notificationcenter.model.NotificaTypeModel
 * @generated
 */
@JSON(strict = true)
public class NotificaTypeModelImpl extends BaseModelImpl<NotificaType>
	implements NotificaTypeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a notifica type model instance should use the {@link com.xpiping.notificationcenter.model.NotificaType} interface instead.
	 */
	public static final String TABLE_NAME = "xpiping_notificationcenter_NotificaType";
	public static final Object[][] TABLE_COLUMNS = {
			{ "notificaTypeId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "name", Types.VARCHAR },
			{ "messageDestination", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "placeHolders", Types.CLOB },
			{ "aviable", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table xpiping_notificationcenter_NotificaType (notificaTypeId LONG not null primary key,companyId LONG,createDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,messageDestination VARCHAR(75) null,description VARCHAR(75) null,placeHolders TEXT null,aviable BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table xpiping_notificationcenter_NotificaType";
	public static final String ORDER_BY_JPQL = " ORDER BY notificaType.name ASC";
	public static final String ORDER_BY_SQL = " ORDER BY xpiping_notificationcenter_NotificaType.name ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.xpiping.notificationcenter.model.NotificaType"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.xpiping.notificationcenter.model.NotificaType"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.xpiping.notificationcenter.model.NotificaType"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long NAME_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static NotificaType toModel(NotificaTypeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		NotificaType model = new NotificaTypeImpl();

		model.setNotificaTypeId(soapModel.getNotificaTypeId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setName(soapModel.getName());
		model.setMessageDestination(soapModel.getMessageDestination());
		model.setDescription(soapModel.getDescription());
		model.setPlaceHolders(soapModel.getPlaceHolders());
		model.setAviable(soapModel.getAviable());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<NotificaType> toModels(NotificaTypeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<NotificaType> models = new ArrayList<NotificaType>(soapModels.length);

		for (NotificaTypeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.xpiping.notificationcenter.model.NotificaType"));

	public NotificaTypeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _notificaTypeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNotificaTypeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _notificaTypeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return NotificaType.class;
	}

	@Override
	public String getModelClassName() {
		return NotificaType.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("notificaTypeId", getNotificaTypeId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("name", getName());
		attributes.put("messageDestination", getMessageDestination());
		attributes.put("description", getDescription());
		attributes.put("placeHolders", getPlaceHolders());
		attributes.put("aviable", getAviable());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long notificaTypeId = (Long)attributes.get("notificaTypeId");

		if (notificaTypeId != null) {
			setNotificaTypeId(notificaTypeId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String messageDestination = (String)attributes.get("messageDestination");

		if (messageDestination != null) {
			setMessageDestination(messageDestination);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String placeHolders = (String)attributes.get("placeHolders");

		if (placeHolders != null) {
			setPlaceHolders(placeHolders);
		}

		Boolean aviable = (Boolean)attributes.get("aviable");

		if (aviable != null) {
			setAviable(aviable);
		}
	}

	@JSON
	@Override
	public long getNotificaTypeId() {
		return _notificaTypeId;
	}

	@Override
	public void setNotificaTypeId(long notificaTypeId) {
		_notificaTypeId = notificaTypeId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask = -1L;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@JSON
	@Override
	public String getMessageDestination() {
		if (_messageDestination == null) {
			return StringPool.BLANK;
		}
		else {
			return _messageDestination;
		}
	}

	@Override
	public void setMessageDestination(String messageDestination) {
		_messageDestination = messageDestination;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getPlaceHolders() {
		if (_placeHolders == null) {
			return StringPool.BLANK;
		}
		else {
			return _placeHolders;
		}
	}

	@Override
	public void setPlaceHolders(String placeHolders) {
		_placeHolders = placeHolders;
	}

	@JSON
	@Override
	public Boolean getAviable() {
		return _aviable;
	}

	@Override
	public void setAviable(Boolean aviable) {
		_aviable = aviable;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			NotificaType.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public NotificaType toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (NotificaType)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NotificaTypeImpl notificaTypeImpl = new NotificaTypeImpl();

		notificaTypeImpl.setNotificaTypeId(getNotificaTypeId());
		notificaTypeImpl.setCompanyId(getCompanyId());
		notificaTypeImpl.setCreateDate(getCreateDate());
		notificaTypeImpl.setModifiedDate(getModifiedDate());
		notificaTypeImpl.setName(getName());
		notificaTypeImpl.setMessageDestination(getMessageDestination());
		notificaTypeImpl.setDescription(getDescription());
		notificaTypeImpl.setPlaceHolders(getPlaceHolders());
		notificaTypeImpl.setAviable(getAviable());

		notificaTypeImpl.resetOriginalValues();

		return notificaTypeImpl;
	}

	@Override
	public int compareTo(NotificaType notificaType) {
		int value = 0;

		value = getName().compareTo(notificaType.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof NotificaType)) {
			return false;
		}

		NotificaType notificaType = (NotificaType)obj;

		long primaryKey = notificaType.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		NotificaTypeModelImpl notificaTypeModelImpl = this;

		notificaTypeModelImpl._originalCompanyId = notificaTypeModelImpl._companyId;

		notificaTypeModelImpl._setOriginalCompanyId = false;

		notificaTypeModelImpl._originalName = notificaTypeModelImpl._name;

		notificaTypeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<NotificaType> toCacheModel() {
		NotificaTypeCacheModel notificaTypeCacheModel = new NotificaTypeCacheModel();

		notificaTypeCacheModel.notificaTypeId = getNotificaTypeId();

		notificaTypeCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			notificaTypeCacheModel.createDate = createDate.getTime();
		}
		else {
			notificaTypeCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			notificaTypeCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			notificaTypeCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		notificaTypeCacheModel.name = getName();

		String name = notificaTypeCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			notificaTypeCacheModel.name = null;
		}

		notificaTypeCacheModel.messageDestination = getMessageDestination();

		String messageDestination = notificaTypeCacheModel.messageDestination;

		if ((messageDestination != null) && (messageDestination.length() == 0)) {
			notificaTypeCacheModel.messageDestination = null;
		}

		notificaTypeCacheModel.description = getDescription();

		String description = notificaTypeCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			notificaTypeCacheModel.description = null;
		}

		notificaTypeCacheModel.placeHolders = getPlaceHolders();

		String placeHolders = notificaTypeCacheModel.placeHolders;

		if ((placeHolders != null) && (placeHolders.length() == 0)) {
			notificaTypeCacheModel.placeHolders = null;
		}

		notificaTypeCacheModel.aviable = getAviable();

		return notificaTypeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{notificaTypeId=");
		sb.append(getNotificaTypeId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", messageDestination=");
		sb.append(getMessageDestination());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", placeHolders=");
		sb.append(getPlaceHolders());
		sb.append(", aviable=");
		sb.append(getAviable());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.xpiping.notificationcenter.model.NotificaType");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>notificaTypeId</column-name><column-value><![CDATA[");
		sb.append(getNotificaTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>messageDestination</column-name><column-value><![CDATA[");
		sb.append(getMessageDestination());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>placeHolders</column-name><column-value><![CDATA[");
		sb.append(getPlaceHolders());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>aviable</column-name><column-value><![CDATA[");
		sb.append(getAviable());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = NotificaType.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			NotificaType.class
		};
	private long _notificaTypeId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private Date _createDate;
	private Date _modifiedDate;
	private String _name;
	private String _originalName;
	private String _messageDestination;
	private String _description;
	private String _placeHolders;
	private Boolean _aviable;
	private long _columnBitmask;
	private NotificaType _escapedModel;
}