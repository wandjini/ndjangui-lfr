/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ndjangui.notificationcenter.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.xpiping.notificationcenter.model.Notifica;
import com.xpiping.notificationcenter.model.NotificaModel;
import com.xpiping.notificationcenter.model.NotificaSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Notifica service. Represents a row in the &quot;xpiping_notificationcenter_Notifica&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.xpiping.notificationcenter.model.NotificaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NotificaImpl}.
 * </p>
 *
 * @author marcoleo
 * @see NotificaImpl
 * @see com.xpiping.notificationcenter.model.Notifica
 * @see com.xpiping.notificationcenter.model.NotificaModel
 * @generated
 */
@JSON(strict = true)
public class NotificaModelImpl extends BaseModelImpl<Notifica>
	implements NotificaModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a notifica model instance should use the {@link com.xpiping.notificationcenter.model.Notifica} interface instead.
	 */
	public static final String TABLE_NAME = "xpiping_notificationcenter_Notifica";
	public static final Object[][] TABLE_COLUMNS = {
			{ "notificaId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "notificaTypeId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "text_", Types.CLOB },
			{ "subject", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "aviable", Types.BOOLEAN },
			{ "ignoreIntersaction", Types.BOOLEAN },
			{ "orgsIds", Types.VARCHAR },
			{ "groupsIds", Types.VARCHAR },
			{ "rolesIds", Types.VARCHAR },
			{ "lastCheckDate", Types.TIMESTAMP },
			{ "deleted", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table xpiping_notificationcenter_Notifica (notificaId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,notificaTypeId LONG,name VARCHAR(75) null,text_ TEXT null,subject VARCHAR(75) null,description VARCHAR(75) null,aviable BOOLEAN,ignoreIntersaction BOOLEAN,orgsIds VARCHAR(75) null,groupsIds VARCHAR(75) null,rolesIds VARCHAR(75) null,lastCheckDate DATE null,deleted BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table xpiping_notificationcenter_Notifica";
	public static final String ORDER_BY_JPQL = " ORDER BY notifica.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY xpiping_notificationcenter_Notifica.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.xpiping.notificationcenter.model.Notifica"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.xpiping.notificationcenter.model.Notifica"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.xpiping.notificationcenter.model.Notifica"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long NOTIFICATYPEID_COLUMN_BITMASK = 2L;
	public static long CREATEDATE_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Notifica toModel(NotificaSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Notifica model = new NotificaImpl();

		model.setNotificaId(soapModel.getNotificaId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setNotificaTypeId(soapModel.getNotificaTypeId());
		model.setName(soapModel.getName());
		model.setText(soapModel.getText());
		model.setSubject(soapModel.getSubject());
		model.setDescription(soapModel.getDescription());
		model.setAviable(soapModel.getAviable());
		model.setIgnoreIntersaction(soapModel.getIgnoreIntersaction());
		model.setOrgsIds(soapModel.getOrgsIds());
		model.setGroupsIds(soapModel.getGroupsIds());
		model.setRolesIds(soapModel.getRolesIds());
		model.setLastCheckDate(soapModel.getLastCheckDate());
		model.setDeleted(soapModel.getDeleted());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Notifica> toModels(NotificaSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Notifica> models = new ArrayList<Notifica>(soapModels.length);

		for (NotificaSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.xpiping.notificationcenter.model.Notifica"));

	public NotificaModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _notificaId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNotificaId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _notificaId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Notifica.class;
	}

	@Override
	public String getModelClassName() {
		return Notifica.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("notificaId", getNotificaId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("notificaTypeId", getNotificaTypeId());
		attributes.put("name", getName());
		attributes.put("text", getText());
		attributes.put("subject", getSubject());
		attributes.put("description", getDescription());
		attributes.put("aviable", getAviable());
		attributes.put("ignoreIntersaction", getIgnoreIntersaction());
		attributes.put("orgsIds", getOrgsIds());
		attributes.put("groupsIds", getGroupsIds());
		attributes.put("rolesIds", getRolesIds());
		attributes.put("lastCheckDate", getLastCheckDate());
		attributes.put("deleted", getDeleted());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long notificaId = (Long)attributes.get("notificaId");

		if (notificaId != null) {
			setNotificaId(notificaId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long notificaTypeId = (Long)attributes.get("notificaTypeId");

		if (notificaTypeId != null) {
			setNotificaTypeId(notificaTypeId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String text = (String)attributes.get("text");

		if (text != null) {
			setText(text);
		}

		String subject = (String)attributes.get("subject");

		if (subject != null) {
			setSubject(subject);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Boolean aviable = (Boolean)attributes.get("aviable");

		if (aviable != null) {
			setAviable(aviable);
		}

		Boolean ignoreIntersaction = (Boolean)attributes.get(
				"ignoreIntersaction");

		if (ignoreIntersaction != null) {
			setIgnoreIntersaction(ignoreIntersaction);
		}

		String orgsIds = (String)attributes.get("orgsIds");

		if (orgsIds != null) {
			setOrgsIds(orgsIds);
		}

		String groupsIds = (String)attributes.get("groupsIds");

		if (groupsIds != null) {
			setGroupsIds(groupsIds);
		}

		String rolesIds = (String)attributes.get("rolesIds");

		if (rolesIds != null) {
			setRolesIds(rolesIds);
		}

		Date lastCheckDate = (Date)attributes.get("lastCheckDate");

		if (lastCheckDate != null) {
			setLastCheckDate(lastCheckDate);
		}

		Boolean deleted = (Boolean)attributes.get("deleted");

		if (deleted != null) {
			setDeleted(deleted);
		}
	}

	@JSON
	@Override
	public long getNotificaId() {
		return _notificaId;
	}

	@Override
	public void setNotificaId(long notificaId) {
		_notificaId = notificaId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getNotificaTypeId() {
		return _notificaTypeId;
	}

	@Override
	public void setNotificaTypeId(long notificaTypeId) {
		_columnBitmask |= NOTIFICATYPEID_COLUMN_BITMASK;

		if (!_setOriginalNotificaTypeId) {
			_setOriginalNotificaTypeId = true;

			_originalNotificaTypeId = _notificaTypeId;
		}

		_notificaTypeId = notificaTypeId;
	}

	public long getOriginalNotificaTypeId() {
		return _originalNotificaTypeId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getText() {
		if (_text == null) {
			return StringPool.BLANK;
		}
		else {
			return _text;
		}
	}

	@Override
	public void setText(String text) {
		_text = text;
	}

	@JSON
	@Override
	public String getSubject() {
		if (_subject == null) {
			return StringPool.BLANK;
		}
		else {
			return _subject;
		}
	}

	@Override
	public void setSubject(String subject) {
		_subject = subject;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public Boolean getAviable() {
		return _aviable;
	}

	@Override
	public void setAviable(Boolean aviable) {
		_aviable = aviable;
	}

	@JSON
	@Override
	public Boolean getIgnoreIntersaction() {
		return _ignoreIntersaction;
	}

	@Override
	public void setIgnoreIntersaction(Boolean ignoreIntersaction) {
		_ignoreIntersaction = ignoreIntersaction;
	}

	@JSON
	@Override
	public String getOrgsIds() {
		if (_orgsIds == null) {
			return StringPool.BLANK;
		}
		else {
			return _orgsIds;
		}
	}

	@Override
	public void setOrgsIds(String orgsIds) {
		_orgsIds = orgsIds;
	}

	@JSON
	@Override
	public String getGroupsIds() {
		if (_groupsIds == null) {
			return StringPool.BLANK;
		}
		else {
			return _groupsIds;
		}
	}

	@Override
	public void setGroupsIds(String groupsIds) {
		_groupsIds = groupsIds;
	}

	@JSON
	@Override
	public String getRolesIds() {
		if (_rolesIds == null) {
			return StringPool.BLANK;
		}
		else {
			return _rolesIds;
		}
	}

	@Override
	public void setRolesIds(String rolesIds) {
		_rolesIds = rolesIds;
	}

	@JSON
	@Override
	public Date getLastCheckDate() {
		return _lastCheckDate;
	}

	@Override
	public void setLastCheckDate(Date lastCheckDate) {
		_lastCheckDate = lastCheckDate;
	}

	@JSON
	@Override
	public Boolean getDeleted() {
		return _deleted;
	}

	@Override
	public void setDeleted(Boolean deleted) {
		_deleted = deleted;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Notifica.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Notifica toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Notifica)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NotificaImpl notificaImpl = new NotificaImpl();

		notificaImpl.setNotificaId(getNotificaId());
		notificaImpl.setCompanyId(getCompanyId());
		notificaImpl.setUserId(getUserId());
		notificaImpl.setUserName(getUserName());
		notificaImpl.setCreateDate(getCreateDate());
		notificaImpl.setModifiedDate(getModifiedDate());
		notificaImpl.setNotificaTypeId(getNotificaTypeId());
		notificaImpl.setName(getName());
		notificaImpl.setText(getText());
		notificaImpl.setSubject(getSubject());
		notificaImpl.setDescription(getDescription());
		notificaImpl.setAviable(getAviable());
		notificaImpl.setIgnoreIntersaction(getIgnoreIntersaction());
		notificaImpl.setOrgsIds(getOrgsIds());
		notificaImpl.setGroupsIds(getGroupsIds());
		notificaImpl.setRolesIds(getRolesIds());
		notificaImpl.setLastCheckDate(getLastCheckDate());
		notificaImpl.setDeleted(getDeleted());

		notificaImpl.resetOriginalValues();

		return notificaImpl;
	}

	@Override
	public int compareTo(Notifica notifica) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), notifica.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Notifica)) {
			return false;
		}

		Notifica notifica = (Notifica)obj;

		long primaryKey = notifica.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		NotificaModelImpl notificaModelImpl = this;

		notificaModelImpl._originalCompanyId = notificaModelImpl._companyId;

		notificaModelImpl._setOriginalCompanyId = false;

		notificaModelImpl._originalNotificaTypeId = notificaModelImpl._notificaTypeId;

		notificaModelImpl._setOriginalNotificaTypeId = false;

		notificaModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Notifica> toCacheModel() {
		NotificaCacheModel notificaCacheModel = new NotificaCacheModel();

		notificaCacheModel.notificaId = getNotificaId();

		notificaCacheModel.companyId = getCompanyId();

		notificaCacheModel.userId = getUserId();

		notificaCacheModel.userName = getUserName();

		String userName = notificaCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			notificaCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			notificaCacheModel.createDate = createDate.getTime();
		}
		else {
			notificaCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			notificaCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			notificaCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		notificaCacheModel.notificaTypeId = getNotificaTypeId();

		notificaCacheModel.name = getName();

		String name = notificaCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			notificaCacheModel.name = null;
		}

		notificaCacheModel.text = getText();

		String text = notificaCacheModel.text;

		if ((text != null) && (text.length() == 0)) {
			notificaCacheModel.text = null;
		}

		notificaCacheModel.subject = getSubject();

		String subject = notificaCacheModel.subject;

		if ((subject != null) && (subject.length() == 0)) {
			notificaCacheModel.subject = null;
		}

		notificaCacheModel.description = getDescription();

		String description = notificaCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			notificaCacheModel.description = null;
		}

		notificaCacheModel.aviable = getAviable();

		notificaCacheModel.ignoreIntersaction = getIgnoreIntersaction();

		notificaCacheModel.orgsIds = getOrgsIds();

		String orgsIds = notificaCacheModel.orgsIds;

		if ((orgsIds != null) && (orgsIds.length() == 0)) {
			notificaCacheModel.orgsIds = null;
		}

		notificaCacheModel.groupsIds = getGroupsIds();

		String groupsIds = notificaCacheModel.groupsIds;

		if ((groupsIds != null) && (groupsIds.length() == 0)) {
			notificaCacheModel.groupsIds = null;
		}

		notificaCacheModel.rolesIds = getRolesIds();

		String rolesIds = notificaCacheModel.rolesIds;

		if ((rolesIds != null) && (rolesIds.length() == 0)) {
			notificaCacheModel.rolesIds = null;
		}

		Date lastCheckDate = getLastCheckDate();

		if (lastCheckDate != null) {
			notificaCacheModel.lastCheckDate = lastCheckDate.getTime();
		}
		else {
			notificaCacheModel.lastCheckDate = Long.MIN_VALUE;
		}

		notificaCacheModel.deleted = getDeleted();

		return notificaCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(37);

		sb.append("{notificaId=");
		sb.append(getNotificaId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", notificaTypeId=");
		sb.append(getNotificaTypeId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", text=");
		sb.append(getText());
		sb.append(", subject=");
		sb.append(getSubject());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", aviable=");
		sb.append(getAviable());
		sb.append(", ignoreIntersaction=");
		sb.append(getIgnoreIntersaction());
		sb.append(", orgsIds=");
		sb.append(getOrgsIds());
		sb.append(", groupsIds=");
		sb.append(getGroupsIds());
		sb.append(", rolesIds=");
		sb.append(getRolesIds());
		sb.append(", lastCheckDate=");
		sb.append(getLastCheckDate());
		sb.append(", deleted=");
		sb.append(getDeleted());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(58);

		sb.append("<model><model-name>");
		sb.append("com.xpiping.notificationcenter.model.Notifica");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>notificaId</column-name><column-value><![CDATA[");
		sb.append(getNotificaId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notificaTypeId</column-name><column-value><![CDATA[");
		sb.append(getNotificaTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>text</column-name><column-value><![CDATA[");
		sb.append(getText());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subject</column-name><column-value><![CDATA[");
		sb.append(getSubject());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>aviable</column-name><column-value><![CDATA[");
		sb.append(getAviable());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ignoreIntersaction</column-name><column-value><![CDATA[");
		sb.append(getIgnoreIntersaction());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>orgsIds</column-name><column-value><![CDATA[");
		sb.append(getOrgsIds());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupsIds</column-name><column-value><![CDATA[");
		sb.append(getGroupsIds());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rolesIds</column-name><column-value><![CDATA[");
		sb.append(getRolesIds());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastCheckDate</column-name><column-value><![CDATA[");
		sb.append(getLastCheckDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deleted</column-name><column-value><![CDATA[");
		sb.append(getDeleted());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Notifica.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Notifica.class
		};
	private long _notificaId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _notificaTypeId;
	private long _originalNotificaTypeId;
	private boolean _setOriginalNotificaTypeId;
	private String _name;
	private String _text;
	private String _subject;
	private String _description;
	private Boolean _aviable;
	private Boolean _ignoreIntersaction;
	private String _orgsIds;
	private String _groupsIds;
	private String _rolesIds;
	private Date _lastCheckDate;
	private Boolean _deleted;
	private long _columnBitmask;
	private Notifica _escapedModel;
}