/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package cmr.fandenatech.ndjangui.model.impl;

import cmr.fandenatech.ndjangui.model.Operation;
import cmr.fandenatech.ndjangui.model.OperationModel;
import cmr.fandenatech.ndjangui.model.OperationSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Operation service. Represents a row in the &quot;ndjangui_Operation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link cmr.fandenatech.ndjangui.model.OperationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OperationImpl}.
 * </p>
 *
 * @author guyw
 * @see OperationImpl
 * @see cmr.fandenatech.ndjangui.model.Operation
 * @see cmr.fandenatech.ndjangui.model.OperationModel
 * @generated
 */
@JSON(strict = true)
public class OperationModelImpl extends BaseModelImpl<Operation>
	implements OperationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a operation model instance should use the {@link cmr.fandenatech.ndjangui.model.Operation} interface instead.
	 */
	public static final String TABLE_NAME = "ndjangui_Operation";
	public static final Object[][] TABLE_COLUMNS = {
			{ "operationId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "budgetPeriodId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "shortDescription", Types.CLOB },
			{ "operationTypeId", Types.BIGINT },
			{ "sittingId", Types.BIGINT },
			{ "status", Types.INTEGER },
			{ "amount", Types.DOUBLE },
			{ "srcFundClassPK", Types.BIGINT },
			{ "srcFundClassName", Types.VARCHAR },
			{ "destFundClassPK", Types.BIGINT },
			{ "destFundClassName", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table ndjangui_Operation (operationId LONG not null primary key,userId LONG,groupId LONG,companyId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,budgetPeriodId LONG,name VARCHAR(75) null,shortDescription TEXT null,operationTypeId LONG,sittingId LONG,status INTEGER,amount DOUBLE,srcFundClassPK LONG,srcFundClassName VARCHAR(75) null,destFundClassPK LONG,destFundClassName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table ndjangui_Operation";
	public static final String ORDER_BY_JPQL = " ORDER BY operation.operationId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ndjangui_Operation.operationId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.cmr.fandenatech.ndjangui.model.Operation"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.cmr.fandenatech.ndjangui.model.Operation"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.cmr.fandenatech.ndjangui.model.Operation"),
			true);
	public static long GROUPID_COLUMN_BITMASK = 1L;
	public static long STATUS_COLUMN_BITMASK = 2L;
	public static long OPERATIONID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Operation toModel(OperationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Operation model = new OperationImpl();

		model.setOperationId(soapModel.getOperationId());
		model.setUserId(soapModel.getUserId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setBudgetPeriodId(soapModel.getBudgetPeriodId());
		model.setName(soapModel.getName());
		model.setShortDescription(soapModel.getShortDescription());
		model.setOperationTypeId(soapModel.getOperationTypeId());
		model.setSittingId(soapModel.getSittingId());
		model.setStatus(soapModel.getStatus());
		model.setAmount(soapModel.getAmount());
		model.setSrcFundClassPK(soapModel.getSrcFundClassPK());
		model.setSrcFundClassName(soapModel.getSrcFundClassName());
		model.setDestFundClassPK(soapModel.getDestFundClassPK());
		model.setDestFundClassName(soapModel.getDestFundClassName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Operation> toModels(OperationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Operation> models = new ArrayList<Operation>(soapModels.length);

		for (OperationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.cmr.fandenatech.ndjangui.model.Operation"));

	public OperationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _operationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setOperationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _operationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Operation.class;
	}

	@Override
	public String getModelClassName() {
		return Operation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("operationId", getOperationId());
		attributes.put("userId", getUserId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("budgetPeriodId", getBudgetPeriodId());
		attributes.put("name", getName());
		attributes.put("shortDescription", getShortDescription());
		attributes.put("operationTypeId", getOperationTypeId());
		attributes.put("sittingId", getSittingId());
		attributes.put("status", getStatus());
		attributes.put("amount", getAmount());
		attributes.put("srcFundClassPK", getSrcFundClassPK());
		attributes.put("srcFundClassName", getSrcFundClassName());
		attributes.put("destFundClassPK", getDestFundClassPK());
		attributes.put("destFundClassName", getDestFundClassName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long operationId = (Long)attributes.get("operationId");

		if (operationId != null) {
			setOperationId(operationId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long budgetPeriodId = (Long)attributes.get("budgetPeriodId");

		if (budgetPeriodId != null) {
			setBudgetPeriodId(budgetPeriodId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String shortDescription = (String)attributes.get("shortDescription");

		if (shortDescription != null) {
			setShortDescription(shortDescription);
		}

		Long operationTypeId = (Long)attributes.get("operationTypeId");

		if (operationTypeId != null) {
			setOperationTypeId(operationTypeId);
		}

		Long sittingId = (Long)attributes.get("sittingId");

		if (sittingId != null) {
			setSittingId(sittingId);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Double amount = (Double)attributes.get("amount");

		if (amount != null) {
			setAmount(amount);
		}

		Long srcFundClassPK = (Long)attributes.get("srcFundClassPK");

		if (srcFundClassPK != null) {
			setSrcFundClassPK(srcFundClassPK);
		}

		String srcFundClassName = (String)attributes.get("srcFundClassName");

		if (srcFundClassName != null) {
			setSrcFundClassName(srcFundClassName);
		}

		Long destFundClassPK = (Long)attributes.get("destFundClassPK");

		if (destFundClassPK != null) {
			setDestFundClassPK(destFundClassPK);
		}

		String destFundClassName = (String)attributes.get("destFundClassName");

		if (destFundClassName != null) {
			setDestFundClassName(destFundClassName);
		}
	}

	@JSON
	@Override
	public long getOperationId() {
		return _operationId;
	}

	@Override
	public void setOperationId(long operationId) {
		_operationId = operationId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getBudgetPeriodId() {
		return _budgetPeriodId;
	}

	@Override
	public void setBudgetPeriodId(long budgetPeriodId) {
		_budgetPeriodId = budgetPeriodId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getShortDescription() {
		if (_shortDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _shortDescription;
		}
	}

	@Override
	public void setShortDescription(String shortDescription) {
		_shortDescription = shortDescription;
	}

	@JSON
	@Override
	public long getOperationTypeId() {
		return _operationTypeId;
	}

	@Override
	public void setOperationTypeId(long operationTypeId) {
		_operationTypeId = operationTypeId;
	}

	@JSON
	@Override
	public long getSittingId() {
		return _sittingId;
	}

	@Override
	public void setSittingId(long sittingId) {
		_sittingId = sittingId;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public double getAmount() {
		return _amount;
	}

	@Override
	public void setAmount(double amount) {
		_amount = amount;
	}

	@JSON
	@Override
	public long getSrcFundClassPK() {
		return _srcFundClassPK;
	}

	@Override
	public void setSrcFundClassPK(long srcFundClassPK) {
		_srcFundClassPK = srcFundClassPK;
	}

	@JSON
	@Override
	public String getSrcFundClassName() {
		if (_srcFundClassName == null) {
			return StringPool.BLANK;
		}
		else {
			return _srcFundClassName;
		}
	}

	@Override
	public void setSrcFundClassName(String srcFundClassName) {
		_srcFundClassName = srcFundClassName;
	}

	@JSON
	@Override
	public long getDestFundClassPK() {
		return _destFundClassPK;
	}

	@Override
	public void setDestFundClassPK(long destFundClassPK) {
		_destFundClassPK = destFundClassPK;
	}

	@JSON
	@Override
	public String getDestFundClassName() {
		if (_destFundClassName == null) {
			return StringPool.BLANK;
		}
		else {
			return _destFundClassName;
		}
	}

	@Override
	public void setDestFundClassName(String destFundClassName) {
		_destFundClassName = destFundClassName;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Operation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Operation toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Operation)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OperationImpl operationImpl = new OperationImpl();

		operationImpl.setOperationId(getOperationId());
		operationImpl.setUserId(getUserId());
		operationImpl.setGroupId(getGroupId());
		operationImpl.setCompanyId(getCompanyId());
		operationImpl.setUserName(getUserName());
		operationImpl.setCreateDate(getCreateDate());
		operationImpl.setModifiedDate(getModifiedDate());
		operationImpl.setBudgetPeriodId(getBudgetPeriodId());
		operationImpl.setName(getName());
		operationImpl.setShortDescription(getShortDescription());
		operationImpl.setOperationTypeId(getOperationTypeId());
		operationImpl.setSittingId(getSittingId());
		operationImpl.setStatus(getStatus());
		operationImpl.setAmount(getAmount());
		operationImpl.setSrcFundClassPK(getSrcFundClassPK());
		operationImpl.setSrcFundClassName(getSrcFundClassName());
		operationImpl.setDestFundClassPK(getDestFundClassPK());
		operationImpl.setDestFundClassName(getDestFundClassName());

		operationImpl.resetOriginalValues();

		return operationImpl;
	}

	@Override
	public int compareTo(Operation operation) {
		long primaryKey = operation.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Operation)) {
			return false;
		}

		Operation operation = (Operation)obj;

		long primaryKey = operation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		OperationModelImpl operationModelImpl = this;

		operationModelImpl._originalGroupId = operationModelImpl._groupId;

		operationModelImpl._setOriginalGroupId = false;

		operationModelImpl._originalStatus = operationModelImpl._status;

		operationModelImpl._setOriginalStatus = false;

		operationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Operation> toCacheModel() {
		OperationCacheModel operationCacheModel = new OperationCacheModel();

		operationCacheModel.operationId = getOperationId();

		operationCacheModel.userId = getUserId();

		operationCacheModel.groupId = getGroupId();

		operationCacheModel.companyId = getCompanyId();

		operationCacheModel.userName = getUserName();

		String userName = operationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			operationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			operationCacheModel.createDate = createDate.getTime();
		}
		else {
			operationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			operationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			operationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		operationCacheModel.budgetPeriodId = getBudgetPeriodId();

		operationCacheModel.name = getName();

		String name = operationCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			operationCacheModel.name = null;
		}

		operationCacheModel.shortDescription = getShortDescription();

		String shortDescription = operationCacheModel.shortDescription;

		if ((shortDescription != null) && (shortDescription.length() == 0)) {
			operationCacheModel.shortDescription = null;
		}

		operationCacheModel.operationTypeId = getOperationTypeId();

		operationCacheModel.sittingId = getSittingId();

		operationCacheModel.status = getStatus();

		operationCacheModel.amount = getAmount();

		operationCacheModel.srcFundClassPK = getSrcFundClassPK();

		operationCacheModel.srcFundClassName = getSrcFundClassName();

		String srcFundClassName = operationCacheModel.srcFundClassName;

		if ((srcFundClassName != null) && (srcFundClassName.length() == 0)) {
			operationCacheModel.srcFundClassName = null;
		}

		operationCacheModel.destFundClassPK = getDestFundClassPK();

		operationCacheModel.destFundClassName = getDestFundClassName();

		String destFundClassName = operationCacheModel.destFundClassName;

		if ((destFundClassName != null) && (destFundClassName.length() == 0)) {
			operationCacheModel.destFundClassName = null;
		}

		return operationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(37);

		sb.append("{operationId=");
		sb.append(getOperationId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", budgetPeriodId=");
		sb.append(getBudgetPeriodId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", shortDescription=");
		sb.append(getShortDescription());
		sb.append(", operationTypeId=");
		sb.append(getOperationTypeId());
		sb.append(", sittingId=");
		sb.append(getSittingId());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", amount=");
		sb.append(getAmount());
		sb.append(", srcFundClassPK=");
		sb.append(getSrcFundClassPK());
		sb.append(", srcFundClassName=");
		sb.append(getSrcFundClassName());
		sb.append(", destFundClassPK=");
		sb.append(getDestFundClassPK());
		sb.append(", destFundClassName=");
		sb.append(getDestFundClassName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(58);

		sb.append("<model><model-name>");
		sb.append("cmr.fandenatech.ndjangui.model.Operation");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>operationId</column-name><column-value><![CDATA[");
		sb.append(getOperationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>budgetPeriodId</column-name><column-value><![CDATA[");
		sb.append(getBudgetPeriodId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shortDescription</column-name><column-value><![CDATA[");
		sb.append(getShortDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>operationTypeId</column-name><column-value><![CDATA[");
		sb.append(getOperationTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sittingId</column-name><column-value><![CDATA[");
		sb.append(getSittingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>amount</column-name><column-value><![CDATA[");
		sb.append(getAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>srcFundClassPK</column-name><column-value><![CDATA[");
		sb.append(getSrcFundClassPK());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>srcFundClassName</column-name><column-value><![CDATA[");
		sb.append(getSrcFundClassName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>destFundClassPK</column-name><column-value><![CDATA[");
		sb.append(getDestFundClassPK());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>destFundClassName</column-name><column-value><![CDATA[");
		sb.append(getDestFundClassName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Operation.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Operation.class
		};
	private long _operationId;
	private long _userId;
	private String _userUuid;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _budgetPeriodId;
	private String _name;
	private String _shortDescription;
	private long _operationTypeId;
	private long _sittingId;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private double _amount;
	private long _srcFundClassPK;
	private String _srcFundClassName;
	private long _destFundClassPK;
	private String _destFundClassName;
	private long _columnBitmask;
	private Operation _escapedModel;
}