/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package cmr.fandenatech.ndjangui.model.impl;

import cmr.fandenatech.ndjangui.model.Fund;
import cmr.fandenatech.ndjangui.model.FundModel;
import cmr.fandenatech.ndjangui.model.FundSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Fund service. Represents a row in the &quot;ndjangui_Fund&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link cmr.fandenatech.ndjangui.model.FundModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FundImpl}.
 * </p>
 *
 * @author guyw
 * @see FundImpl
 * @see cmr.fandenatech.ndjangui.model.Fund
 * @see cmr.fandenatech.ndjangui.model.FundModel
 * @generated
 */
@JSON(strict = true)
public class FundModelImpl extends BaseModelImpl<Fund> implements FundModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a fund model instance should use the {@link cmr.fandenatech.ndjangui.model.Fund} interface instead.
	 */
	public static final String TABLE_NAME = "ndjangui_Fund";
	public static final Object[][] TABLE_COLUMNS = {
			{ "fundId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "budgetPeriodId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "shortDescription", Types.CLOB },
			{ "fundTypeId", Types.BIGINT },
			{ "fundType", Types.VARCHAR },
			{ "status", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table ndjangui_Fund (fundId LONG not null primary key,userId LONG,groupId LONG,companyId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,budgetPeriodId LONG,name VARCHAR(75) null,shortDescription TEXT null,fundTypeId LONG,fundType VARCHAR(75) null,status INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table ndjangui_Fund";
	public static final String ORDER_BY_JPQL = " ORDER BY fund.fundId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ndjangui_Fund.fundId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.cmr.fandenatech.ndjangui.model.Fund"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.cmr.fandenatech.ndjangui.model.Fund"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.cmr.fandenatech.ndjangui.model.Fund"),
			true);
	public static long BUDGETPERIODID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long STATUS_COLUMN_BITMASK = 4L;
	public static long FUNDID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Fund toModel(FundSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Fund model = new FundImpl();

		model.setFundId(soapModel.getFundId());
		model.setUserId(soapModel.getUserId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setBudgetPeriodId(soapModel.getBudgetPeriodId());
		model.setName(soapModel.getName());
		model.setShortDescription(soapModel.getShortDescription());
		model.setFundTypeId(soapModel.getFundTypeId());
		model.setFundType(soapModel.getFundType());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Fund> toModels(FundSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Fund> models = new ArrayList<Fund>(soapModels.length);

		for (FundSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.cmr.fandenatech.ndjangui.model.Fund"));

	public FundModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _fundId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFundId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _fundId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Fund.class;
	}

	@Override
	public String getModelClassName() {
		return Fund.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("fundId", getFundId());
		attributes.put("userId", getUserId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("budgetPeriodId", getBudgetPeriodId());
		attributes.put("name", getName());
		attributes.put("shortDescription", getShortDescription());
		attributes.put("fundTypeId", getFundTypeId());
		attributes.put("fundType", getFundType());
		attributes.put("status", getStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long fundId = (Long)attributes.get("fundId");

		if (fundId != null) {
			setFundId(fundId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long budgetPeriodId = (Long)attributes.get("budgetPeriodId");

		if (budgetPeriodId != null) {
			setBudgetPeriodId(budgetPeriodId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String shortDescription = (String)attributes.get("shortDescription");

		if (shortDescription != null) {
			setShortDescription(shortDescription);
		}

		Long fundTypeId = (Long)attributes.get("fundTypeId");

		if (fundTypeId != null) {
			setFundTypeId(fundTypeId);
		}

		String fundType = (String)attributes.get("fundType");

		if (fundType != null) {
			setFundType(fundType);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@JSON
	@Override
	public long getFundId() {
		return _fundId;
	}

	@Override
	public void setFundId(long fundId) {
		_fundId = fundId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getBudgetPeriodId() {
		return _budgetPeriodId;
	}

	@Override
	public void setBudgetPeriodId(long budgetPeriodId) {
		_columnBitmask |= BUDGETPERIODID_COLUMN_BITMASK;

		if (!_setOriginalBudgetPeriodId) {
			_setOriginalBudgetPeriodId = true;

			_originalBudgetPeriodId = _budgetPeriodId;
		}

		_budgetPeriodId = budgetPeriodId;
	}

	public long getOriginalBudgetPeriodId() {
		return _originalBudgetPeriodId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getShortDescription() {
		if (_shortDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _shortDescription;
		}
	}

	@Override
	public void setShortDescription(String shortDescription) {
		_shortDescription = shortDescription;
	}

	@JSON
	@Override
	public long getFundTypeId() {
		return _fundTypeId;
	}

	@Override
	public void setFundTypeId(long fundTypeId) {
		_fundTypeId = fundTypeId;
	}

	@JSON
	@Override
	public String getFundType() {
		if (_fundType == null) {
			return StringPool.BLANK;
		}
		else {
			return _fundType;
		}
	}

	@Override
	public void setFundType(String fundType) {
		_fundType = fundType;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Fund.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Fund toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Fund)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FundImpl fundImpl = new FundImpl();

		fundImpl.setFundId(getFundId());
		fundImpl.setUserId(getUserId());
		fundImpl.setGroupId(getGroupId());
		fundImpl.setCompanyId(getCompanyId());
		fundImpl.setUserName(getUserName());
		fundImpl.setCreateDate(getCreateDate());
		fundImpl.setModifiedDate(getModifiedDate());
		fundImpl.setBudgetPeriodId(getBudgetPeriodId());
		fundImpl.setName(getName());
		fundImpl.setShortDescription(getShortDescription());
		fundImpl.setFundTypeId(getFundTypeId());
		fundImpl.setFundType(getFundType());
		fundImpl.setStatus(getStatus());

		fundImpl.resetOriginalValues();

		return fundImpl;
	}

	@Override
	public int compareTo(Fund fund) {
		long primaryKey = fund.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Fund)) {
			return false;
		}

		Fund fund = (Fund)obj;

		long primaryKey = fund.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		FundModelImpl fundModelImpl = this;

		fundModelImpl._originalGroupId = fundModelImpl._groupId;

		fundModelImpl._setOriginalGroupId = false;

		fundModelImpl._originalBudgetPeriodId = fundModelImpl._budgetPeriodId;

		fundModelImpl._setOriginalBudgetPeriodId = false;

		fundModelImpl._originalStatus = fundModelImpl._status;

		fundModelImpl._setOriginalStatus = false;

		fundModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Fund> toCacheModel() {
		FundCacheModel fundCacheModel = new FundCacheModel();

		fundCacheModel.fundId = getFundId();

		fundCacheModel.userId = getUserId();

		fundCacheModel.groupId = getGroupId();

		fundCacheModel.companyId = getCompanyId();

		fundCacheModel.userName = getUserName();

		String userName = fundCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			fundCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			fundCacheModel.createDate = createDate.getTime();
		}
		else {
			fundCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			fundCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			fundCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		fundCacheModel.budgetPeriodId = getBudgetPeriodId();

		fundCacheModel.name = getName();

		String name = fundCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			fundCacheModel.name = null;
		}

		fundCacheModel.shortDescription = getShortDescription();

		String shortDescription = fundCacheModel.shortDescription;

		if ((shortDescription != null) && (shortDescription.length() == 0)) {
			fundCacheModel.shortDescription = null;
		}

		fundCacheModel.fundTypeId = getFundTypeId();

		fundCacheModel.fundType = getFundType();

		String fundType = fundCacheModel.fundType;

		if ((fundType != null) && (fundType.length() == 0)) {
			fundCacheModel.fundType = null;
		}

		fundCacheModel.status = getStatus();

		return fundCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{fundId=");
		sb.append(getFundId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", budgetPeriodId=");
		sb.append(getBudgetPeriodId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", shortDescription=");
		sb.append(getShortDescription());
		sb.append(", fundTypeId=");
		sb.append(getFundTypeId());
		sb.append(", fundType=");
		sb.append(getFundType());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("cmr.fandenatech.ndjangui.model.Fund");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>fundId</column-name><column-value><![CDATA[");
		sb.append(getFundId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>budgetPeriodId</column-name><column-value><![CDATA[");
		sb.append(getBudgetPeriodId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shortDescription</column-name><column-value><![CDATA[");
		sb.append(getShortDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fundTypeId</column-name><column-value><![CDATA[");
		sb.append(getFundTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fundType</column-name><column-value><![CDATA[");
		sb.append(getFundType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Fund.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Fund.class };
	private long _fundId;
	private long _userId;
	private String _userUuid;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _budgetPeriodId;
	private long _originalBudgetPeriodId;
	private boolean _setOriginalBudgetPeriodId;
	private String _name;
	private String _shortDescription;
	private long _fundTypeId;
	private String _fundType;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _columnBitmask;
	private Fund _escapedModel;
}