/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package cmr.fandenatech.ndjangui.model.impl;

import cmr.fandenatech.ndjangui.model.MemberFund;
import cmr.fandenatech.ndjangui.model.MemberFundModel;
import cmr.fandenatech.ndjangui.model.MemberFundSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MemberFund service. Represents a row in the &quot;ndjangui_MemberFund&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link cmr.fandenatech.ndjangui.model.MemberFundModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MemberFundImpl}.
 * </p>
 *
 * @author guyw
 * @see MemberFundImpl
 * @see cmr.fandenatech.ndjangui.model.MemberFund
 * @see cmr.fandenatech.ndjangui.model.MemberFundModel
 * @generated
 */
@JSON(strict = true)
public class MemberFundModelImpl extends BaseModelImpl<MemberFund>
	implements MemberFundModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a member fund model instance should use the {@link cmr.fandenatech.ndjangui.model.MemberFund} interface instead.
	 */
	public static final String TABLE_NAME = "ndjangui_MemberFund";
	public static final Object[][] TABLE_COLUMNS = {
			{ "memberFundId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "memberId", Types.BIGINT },
			{ "fundId", Types.BIGINT },
			{ "memberName", Types.VARCHAR },
			{ "fundName", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table ndjangui_MemberFund (memberFundId LONG not null primary key,userId LONG,groupId LONG,companyId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,memberId LONG,fundId LONG,memberName VARCHAR(75) null,fundName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table ndjangui_MemberFund";
	public static final String ORDER_BY_JPQL = " ORDER BY memberFund.memberFundId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ndjangui_MemberFund.memberFundId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.cmr.fandenatech.ndjangui.model.MemberFund"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.cmr.fandenatech.ndjangui.model.MemberFund"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MemberFund toModel(MemberFundSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MemberFund model = new MemberFundImpl();

		model.setMemberFundId(soapModel.getMemberFundId());
		model.setUserId(soapModel.getUserId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setMemberId(soapModel.getMemberId());
		model.setFundId(soapModel.getFundId());
		model.setMemberName(soapModel.getMemberName());
		model.setFundName(soapModel.getFundName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MemberFund> toModels(MemberFundSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MemberFund> models = new ArrayList<MemberFund>(soapModels.length);

		for (MemberFundSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.cmr.fandenatech.ndjangui.model.MemberFund"));

	public MemberFundModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _memberFundId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMemberFundId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _memberFundId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MemberFund.class;
	}

	@Override
	public String getModelClassName() {
		return MemberFund.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("memberFundId", getMemberFundId());
		attributes.put("userId", getUserId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("memberId", getMemberId());
		attributes.put("fundId", getFundId());
		attributes.put("memberName", getMemberName());
		attributes.put("fundName", getFundName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long memberFundId = (Long)attributes.get("memberFundId");

		if (memberFundId != null) {
			setMemberFundId(memberFundId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long memberId = (Long)attributes.get("memberId");

		if (memberId != null) {
			setMemberId(memberId);
		}

		Long fundId = (Long)attributes.get("fundId");

		if (fundId != null) {
			setFundId(fundId);
		}

		String memberName = (String)attributes.get("memberName");

		if (memberName != null) {
			setMemberName(memberName);
		}

		String fundName = (String)attributes.get("fundName");

		if (fundName != null) {
			setFundName(fundName);
		}
	}

	@JSON
	@Override
	public long getMemberFundId() {
		return _memberFundId;
	}

	@Override
	public void setMemberFundId(long memberFundId) {
		_memberFundId = memberFundId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getMemberId() {
		return _memberId;
	}

	@Override
	public void setMemberId(long memberId) {
		_memberId = memberId;
	}

	@JSON
	@Override
	public long getFundId() {
		return _fundId;
	}

	@Override
	public void setFundId(long fundId) {
		_fundId = fundId;
	}

	@JSON
	@Override
	public String getMemberName() {
		if (_memberName == null) {
			return StringPool.BLANK;
		}
		else {
			return _memberName;
		}
	}

	@Override
	public void setMemberName(String memberName) {
		_memberName = memberName;
	}

	@JSON
	@Override
	public String getFundName() {
		if (_fundName == null) {
			return StringPool.BLANK;
		}
		else {
			return _fundName;
		}
	}

	@Override
	public void setFundName(String fundName) {
		_fundName = fundName;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			MemberFund.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MemberFund toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MemberFund)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MemberFundImpl memberFundImpl = new MemberFundImpl();

		memberFundImpl.setMemberFundId(getMemberFundId());
		memberFundImpl.setUserId(getUserId());
		memberFundImpl.setGroupId(getGroupId());
		memberFundImpl.setCompanyId(getCompanyId());
		memberFundImpl.setUserName(getUserName());
		memberFundImpl.setCreateDate(getCreateDate());
		memberFundImpl.setModifiedDate(getModifiedDate());
		memberFundImpl.setMemberId(getMemberId());
		memberFundImpl.setFundId(getFundId());
		memberFundImpl.setMemberName(getMemberName());
		memberFundImpl.setFundName(getFundName());

		memberFundImpl.resetOriginalValues();

		return memberFundImpl;
	}

	@Override
	public int compareTo(MemberFund memberFund) {
		long primaryKey = memberFund.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MemberFund)) {
			return false;
		}

		MemberFund memberFund = (MemberFund)obj;

		long primaryKey = memberFund.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<MemberFund> toCacheModel() {
		MemberFundCacheModel memberFundCacheModel = new MemberFundCacheModel();

		memberFundCacheModel.memberFundId = getMemberFundId();

		memberFundCacheModel.userId = getUserId();

		memberFundCacheModel.groupId = getGroupId();

		memberFundCacheModel.companyId = getCompanyId();

		memberFundCacheModel.userName = getUserName();

		String userName = memberFundCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			memberFundCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			memberFundCacheModel.createDate = createDate.getTime();
		}
		else {
			memberFundCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			memberFundCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			memberFundCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		memberFundCacheModel.memberId = getMemberId();

		memberFundCacheModel.fundId = getFundId();

		memberFundCacheModel.memberName = getMemberName();

		String memberName = memberFundCacheModel.memberName;

		if ((memberName != null) && (memberName.length() == 0)) {
			memberFundCacheModel.memberName = null;
		}

		memberFundCacheModel.fundName = getFundName();

		String fundName = memberFundCacheModel.fundName;

		if ((fundName != null) && (fundName.length() == 0)) {
			memberFundCacheModel.fundName = null;
		}

		return memberFundCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{memberFundId=");
		sb.append(getMemberFundId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", memberId=");
		sb.append(getMemberId());
		sb.append(", fundId=");
		sb.append(getFundId());
		sb.append(", memberName=");
		sb.append(getMemberName());
		sb.append(", fundName=");
		sb.append(getFundName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("cmr.fandenatech.ndjangui.model.MemberFund");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>memberFundId</column-name><column-value><![CDATA[");
		sb.append(getMemberFundId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>memberId</column-name><column-value><![CDATA[");
		sb.append(getMemberId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fundId</column-name><column-value><![CDATA[");
		sb.append(getFundId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>memberName</column-name><column-value><![CDATA[");
		sb.append(getMemberName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fundName</column-name><column-value><![CDATA[");
		sb.append(getFundName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = MemberFund.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			MemberFund.class
		};
	private long _memberFundId;
	private long _userId;
	private String _userUuid;
	private long _groupId;
	private long _companyId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _memberId;
	private long _fundId;
	private String _memberName;
	private String _fundName;
	private MemberFund _escapedModel;
}