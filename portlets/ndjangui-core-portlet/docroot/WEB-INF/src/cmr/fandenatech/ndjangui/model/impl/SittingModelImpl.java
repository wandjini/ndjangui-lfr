/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package cmr.fandenatech.ndjangui.model.impl;

import cmr.fandenatech.ndjangui.model.Sitting;
import cmr.fandenatech.ndjangui.model.SittingModel;
import cmr.fandenatech.ndjangui.model.SittingSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Sitting service. Represents a row in the &quot;ndjangui_Sitting&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link cmr.fandenatech.ndjangui.model.SittingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SittingImpl}.
 * </p>
 *
 * @author guyw
 * @see SittingImpl
 * @see cmr.fandenatech.ndjangui.model.Sitting
 * @see cmr.fandenatech.ndjangui.model.SittingModel
 * @generated
 */
@JSON(strict = true)
public class SittingModelImpl extends BaseModelImpl<Sitting>
	implements SittingModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sitting model instance should use the {@link cmr.fandenatech.ndjangui.model.Sitting} interface instead.
	 */
	public static final String TABLE_NAME = "ndjangui_Sitting";
	public static final Object[][] TABLE_COLUMNS = {
			{ "sittingId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "startDate", Types.TIMESTAMP },
			{ "startHour", Types.INTEGER },
			{ "startMin", Types.INTEGER },
			{ "endDate", Types.TIMESTAMP },
			{ "endHour", Types.INTEGER },
			{ "endMin", Types.INTEGER },
			{ "budgetPeriodId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "dayPlan", Types.CLOB },
			{ "notes", Types.VARCHAR },
			{ "status", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table ndjangui_Sitting (sittingId LONG not null primary key,userId LONG,groupId LONG,companyId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,startDate DATE null,startHour INTEGER,startMin INTEGER,endDate DATE null,endHour INTEGER,endMin INTEGER,budgetPeriodId LONG,name VARCHAR(75) null,dayPlan TEXT null,notes VARCHAR(75) null,status INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table ndjangui_Sitting";
	public static final String ORDER_BY_JPQL = " ORDER BY sitting.sittingId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ndjangui_Sitting.sittingId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.cmr.fandenatech.ndjangui.model.Sitting"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.cmr.fandenatech.ndjangui.model.Sitting"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.cmr.fandenatech.ndjangui.model.Sitting"),
			true);
	public static long GROUPID_COLUMN_BITMASK = 1L;
	public static long STATUS_COLUMN_BITMASK = 2L;
	public static long SITTINGID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Sitting toModel(SittingSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Sitting model = new SittingImpl();

		model.setSittingId(soapModel.getSittingId());
		model.setUserId(soapModel.getUserId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStartDate(soapModel.getStartDate());
		model.setStartHour(soapModel.getStartHour());
		model.setStartMin(soapModel.getStartMin());
		model.setEndDate(soapModel.getEndDate());
		model.setEndHour(soapModel.getEndHour());
		model.setEndMin(soapModel.getEndMin());
		model.setBudgetPeriodId(soapModel.getBudgetPeriodId());
		model.setName(soapModel.getName());
		model.setDayPlan(soapModel.getDayPlan());
		model.setNotes(soapModel.getNotes());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Sitting> toModels(SittingSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Sitting> models = new ArrayList<Sitting>(soapModels.length);

		for (SittingSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.cmr.fandenatech.ndjangui.model.Sitting"));

	public SittingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _sittingId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSittingId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _sittingId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Sitting.class;
	}

	@Override
	public String getModelClassName() {
		return Sitting.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("sittingId", getSittingId());
		attributes.put("userId", getUserId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("startDate", getStartDate());
		attributes.put("startHour", getStartHour());
		attributes.put("startMin", getStartMin());
		attributes.put("endDate", getEndDate());
		attributes.put("endHour", getEndHour());
		attributes.put("endMin", getEndMin());
		attributes.put("budgetPeriodId", getBudgetPeriodId());
		attributes.put("name", getName());
		attributes.put("dayPlan", getDayPlan());
		attributes.put("notes", getNotes());
		attributes.put("status", getStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long sittingId = (Long)attributes.get("sittingId");

		if (sittingId != null) {
			setSittingId(sittingId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Integer startHour = (Integer)attributes.get("startHour");

		if (startHour != null) {
			setStartHour(startHour);
		}

		Integer startMin = (Integer)attributes.get("startMin");

		if (startMin != null) {
			setStartMin(startMin);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		Integer endHour = (Integer)attributes.get("endHour");

		if (endHour != null) {
			setEndHour(endHour);
		}

		Integer endMin = (Integer)attributes.get("endMin");

		if (endMin != null) {
			setEndMin(endMin);
		}

		Long budgetPeriodId = (Long)attributes.get("budgetPeriodId");

		if (budgetPeriodId != null) {
			setBudgetPeriodId(budgetPeriodId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String dayPlan = (String)attributes.get("dayPlan");

		if (dayPlan != null) {
			setDayPlan(dayPlan);
		}

		String notes = (String)attributes.get("notes");

		if (notes != null) {
			setNotes(notes);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@JSON
	@Override
	public long getSittingId() {
		return _sittingId;
	}

	@Override
	public void setSittingId(long sittingId) {
		_sittingId = sittingId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@JSON
	@Override
	public int getStartHour() {
		return _startHour;
	}

	@Override
	public void setStartHour(int startHour) {
		_startHour = startHour;
	}

	@JSON
	@Override
	public int getStartMin() {
		return _startMin;
	}

	@Override
	public void setStartMin(int startMin) {
		_startMin = startMin;
	}

	@JSON
	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@JSON
	@Override
	public int getEndHour() {
		return _endHour;
	}

	@Override
	public void setEndHour(int endHour) {
		_endHour = endHour;
	}

	@JSON
	@Override
	public int getEndMin() {
		return _endMin;
	}

	@Override
	public void setEndMin(int endMin) {
		_endMin = endMin;
	}

	@JSON
	@Override
	public long getBudgetPeriodId() {
		return _budgetPeriodId;
	}

	@Override
	public void setBudgetPeriodId(long budgetPeriodId) {
		_budgetPeriodId = budgetPeriodId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getDayPlan() {
		if (_dayPlan == null) {
			return StringPool.BLANK;
		}
		else {
			return _dayPlan;
		}
	}

	@Override
	public void setDayPlan(String dayPlan) {
		_dayPlan = dayPlan;
	}

	@JSON
	@Override
	public String getNotes() {
		if (_notes == null) {
			return StringPool.BLANK;
		}
		else {
			return _notes;
		}
	}

	@Override
	public void setNotes(String notes) {
		_notes = notes;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Sitting.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Sitting toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Sitting)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SittingImpl sittingImpl = new SittingImpl();

		sittingImpl.setSittingId(getSittingId());
		sittingImpl.setUserId(getUserId());
		sittingImpl.setGroupId(getGroupId());
		sittingImpl.setCompanyId(getCompanyId());
		sittingImpl.setUserName(getUserName());
		sittingImpl.setCreateDate(getCreateDate());
		sittingImpl.setModifiedDate(getModifiedDate());
		sittingImpl.setStartDate(getStartDate());
		sittingImpl.setStartHour(getStartHour());
		sittingImpl.setStartMin(getStartMin());
		sittingImpl.setEndDate(getEndDate());
		sittingImpl.setEndHour(getEndHour());
		sittingImpl.setEndMin(getEndMin());
		sittingImpl.setBudgetPeriodId(getBudgetPeriodId());
		sittingImpl.setName(getName());
		sittingImpl.setDayPlan(getDayPlan());
		sittingImpl.setNotes(getNotes());
		sittingImpl.setStatus(getStatus());

		sittingImpl.resetOriginalValues();

		return sittingImpl;
	}

	@Override
	public int compareTo(Sitting sitting) {
		long primaryKey = sitting.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Sitting)) {
			return false;
		}

		Sitting sitting = (Sitting)obj;

		long primaryKey = sitting.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SittingModelImpl sittingModelImpl = this;

		sittingModelImpl._originalGroupId = sittingModelImpl._groupId;

		sittingModelImpl._setOriginalGroupId = false;

		sittingModelImpl._originalStatus = sittingModelImpl._status;

		sittingModelImpl._setOriginalStatus = false;

		sittingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Sitting> toCacheModel() {
		SittingCacheModel sittingCacheModel = new SittingCacheModel();

		sittingCacheModel.sittingId = getSittingId();

		sittingCacheModel.userId = getUserId();

		sittingCacheModel.groupId = getGroupId();

		sittingCacheModel.companyId = getCompanyId();

		sittingCacheModel.userName = getUserName();

		String userName = sittingCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			sittingCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			sittingCacheModel.createDate = createDate.getTime();
		}
		else {
			sittingCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			sittingCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			sittingCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			sittingCacheModel.startDate = startDate.getTime();
		}
		else {
			sittingCacheModel.startDate = Long.MIN_VALUE;
		}

		sittingCacheModel.startHour = getStartHour();

		sittingCacheModel.startMin = getStartMin();

		Date endDate = getEndDate();

		if (endDate != null) {
			sittingCacheModel.endDate = endDate.getTime();
		}
		else {
			sittingCacheModel.endDate = Long.MIN_VALUE;
		}

		sittingCacheModel.endHour = getEndHour();

		sittingCacheModel.endMin = getEndMin();

		sittingCacheModel.budgetPeriodId = getBudgetPeriodId();

		sittingCacheModel.name = getName();

		String name = sittingCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			sittingCacheModel.name = null;
		}

		sittingCacheModel.dayPlan = getDayPlan();

		String dayPlan = sittingCacheModel.dayPlan;

		if ((dayPlan != null) && (dayPlan.length() == 0)) {
			sittingCacheModel.dayPlan = null;
		}

		sittingCacheModel.notes = getNotes();

		String notes = sittingCacheModel.notes;

		if ((notes != null) && (notes.length() == 0)) {
			sittingCacheModel.notes = null;
		}

		sittingCacheModel.status = getStatus();

		return sittingCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(37);

		sb.append("{sittingId=");
		sb.append(getSittingId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", startHour=");
		sb.append(getStartHour());
		sb.append(", startMin=");
		sb.append(getStartMin());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", endHour=");
		sb.append(getEndHour());
		sb.append(", endMin=");
		sb.append(getEndMin());
		sb.append(", budgetPeriodId=");
		sb.append(getBudgetPeriodId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", dayPlan=");
		sb.append(getDayPlan());
		sb.append(", notes=");
		sb.append(getNotes());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(58);

		sb.append("<model><model-name>");
		sb.append("cmr.fandenatech.ndjangui.model.Sitting");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>sittingId</column-name><column-value><![CDATA[");
		sb.append(getSittingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startHour</column-name><column-value><![CDATA[");
		sb.append(getStartHour());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startMin</column-name><column-value><![CDATA[");
		sb.append(getStartMin());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endHour</column-name><column-value><![CDATA[");
		sb.append(getEndHour());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endMin</column-name><column-value><![CDATA[");
		sb.append(getEndMin());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>budgetPeriodId</column-name><column-value><![CDATA[");
		sb.append(getBudgetPeriodId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dayPlan</column-name><column-value><![CDATA[");
		sb.append(getDayPlan());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notes</column-name><column-value><![CDATA[");
		sb.append(getNotes());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Sitting.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Sitting.class
		};
	private long _sittingId;
	private long _userId;
	private String _userUuid;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private Date _startDate;
	private int _startHour;
	private int _startMin;
	private Date _endDate;
	private int _endHour;
	private int _endMin;
	private long _budgetPeriodId;
	private String _name;
	private String _dayPlan;
	private String _notes;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _columnBitmask;
	private Sitting _escapedModel;
}